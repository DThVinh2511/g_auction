name: CI/CD Pipeline

on:
  push:
    tags:
      - '*'  # Chạy workflow khi bất kỳ tag nào được tạo

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn clean install -DskipTests

      - name: Install Docker Compose
        run: sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep tag_name | cut -d '"' -f 4)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose && sudo chmod +x /usr/local/bin/docker-compose

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Compose images
        run: docker-compose build

      - name: Push Docker images to Docker Hub
        run: docker-compose push

  deploy:
    needs: build
    runs-on: [git-runner]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Docker Compose
        run: sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep tag_name | cut -d '"' -f 4)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose && sudo chmod +x /usr/local/bin/docker-compose

      - name: Pull Docker Compose images
        run: docker-compose pull

      - name: Stop and remove old containers
        run: docker-compose down

      - name: Setup environment variables
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}" >> .env
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
          echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> .env
          echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env
          echo "JWT_SIGNERKEY=${{ secrets.JWT_SIGNERKEY }}" >> .env
          echo "JWT_VALID_DURATION=${{ secrets.JWT_VALID_DURATION }}" >> .env
          echo "JWT_REFRESH=${{ secrets.JWT_REFRESH }}" >> .env
          echo "CLOUD_NAME=${{ secrets.CLOUD_NAME }}" >> .env
          echo "API_KEY=${{ secrets.API_KEY }}" >> .env
          echo "API_SECRET=${{ secrets.API_SECRET }}" >> .env

      - name: Start new containers
        run: docker-compose up -d

      - name: check variable docker-compose
        run: docker-compose exec springboot env

      - name: Show environment variables in Docker Compose
        run: docker-compose config

  notify_fe:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: Send email notification
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.example.com
        server_port: 587
        username: ${{ secrets.MAIL_USERNAME }}
        password: ${{ secrets.MAIL_PASSWORD }}
        subject: 'CI/CD github'
        body: 'The pipeline has completed successfully.The project has been modified, please visit to update the latest code'
        to: 't.vinh25112003@gmail.com'
        from: ${{ secrets.EMAIL_USERNAME }}
  
  show-logs:
    needs: deploy
    runs-on: [git-runner]
    steps:
      - name: show spring boot logs
        run: docker-compose logs -f springboot
